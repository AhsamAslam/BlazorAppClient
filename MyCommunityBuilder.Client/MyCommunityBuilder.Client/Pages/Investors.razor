@page "/Investors"
@page "/Investors/{SiteID}"
@using MyCommunityBuilder.Client.Services
@using MyCommunityBuilder.Client.Shared
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<Index> _logger
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject IStringLocalizer<Resource> Localizer

@*<div class="row">
    
</div>*@
<JSlider Records="SliderItem"></JSlider>
<NavMenuBar></NavMenuBar>
@*<div class="row" style="height: 75px;">

</div>*@
<div class="container-fluid">
    <div class="row">
        <div class="col-12 col-sm-12 col-md-8 col-lg-8">
            <div>
                <JImage Src="@(String.Format("{0}{1}", Localizer["BaseImageUrl"], Localizer["InvestorMainImage"]))"></JImage>
            </div>
            <div>
                <JHeadingTextCard Title=@Localizer["DontjustbuylocalinvestlocalHereshow"] Records="@HeadingTextCardDto"></JHeadingTextCard>
            </div>
            <div>
                <JImageHeadingTextCard Title=@Localizer["BusinessesDiscussingCrowdfundingOptions"] Records="@ImageHeadingTextCardDto"></JImageHeadingTextCard>
            </div>
        </div>
        <div class="col-12 col-sm-12 col-md-4 col-lg-4">
            <div>
                <JSmallImageCard Records="SmallImageCardDto"></JSmallImageCard>
            </div>
            <div>
                <JLinksCard Title=@Localizer["MoreforInvestors"] Records="LinksCardDto"></JLinksCard>
            </div>
        </div>
    </div>
</div>
@code {
    [Parameter]
    public string SiteID { get; set; }
    public List<HeadingTextCardDto> HeadingTextCardDto = new List<HeadingTextCardDto>();
    public SmallImageCardDto SmallImageCardDto = new SmallImageCardDto();
    public List<LinksCardDto> LinksCardDto = new List<LinksCardDto>();
    public List<ImageHeadingTextCardDto> ImageHeadingTextCardDto = new List<ImageHeadingTextCardDto>();
    List<SliderItemDto> SliderItem = new List<SliderItemDto>();
    #region Authentication
    [Parameter]
    public string ID { get; set; }
    private string mfaName = "[\"mfa\"]";
    private string mfaForceText = "True";
    private Claim amrClaim;
    private Claim force2FAClaim;
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();
    private AuthenticationState authState;
    private string _authMessage;
    private string _surnameMessage;
    #endregion

    protected override async Task OnInitializedAsync()
    {
        #region Components Data
        HeadingTextCardDto = new List<HeadingTextCardDto>
{
            new HeadingTextCardDto{HeadingTextCardLink="/", HeadingTextCardHeading="1. Learn How to Invest Locally",
                                   HeadingTextCardContent = "Read our FAQs or take our online course."},
            new HeadingTextCardDto{HeadingTextCardLink="/", HeadingTextCardHeading="2. Join a Local Investment Group",
                                   HeadingTextCardContent = "Find others living near you interested in local investment and work together."},
            new HeadingTextCardDto{HeadingTextCardLink="/", HeadingTextCardHeading="3. Have strategic discussions with your favorite businesses.",
                                   HeadingTextCardContent = "Propose, receive and explore your favorite ideas for success."},

        };
        SmallImageCardDto = new SmallImageCardDto
        {
            SmallImageCardHeading = Localizer["WhatdoInvestorssay?"],
            SmallImageCardContent = "My investment in Game Knights helped open a second location—and paid me 5% in dividends last year.",
            SmallImageCardSource = String.Format("{0}{1}", Localizer["BaseImageUrl"], Localizer["WhatdoInvestorssayImage"]),
            SmallImageCardText1 = "Jennifer Gordon, 60",
            SmallImageCardText2 = "Investor in Game Knights"
        };
        LinksCardDto = new List<LinksCardDto>
{
            new LinksCardDto{LinksCardLinks="", LinksCardLinksText="Local Investment FAQs"},
            new LinksCardDto{LinksCardLinks="", LinksCardLinksText="New to investing?"},

        };
        ImageHeadingTextCardDto = new List<ImageHeadingTextCardDto>
{
            new ImageHeadingTextCardDto{ImageHeadingTextCardLink = "",
                                        ImageHeadingTextCardImageSource = String.Format("{0}{1}", Localizer["BaseImageUrl"], Localizer["TherapeuticImage"]),
                                        ImageHeadingTextCardHeading= "Licensed Massage Therapy﻿"
                                        ,ImageHeadingTextCardText="Therapeutic massage"},
            new ImageHeadingTextCardDto{ImageHeadingTextCardLink = "",
                                        ImageHeadingTextCardImageSource = String.Format("{0}{1}", Localizer["BaseImageUrl"], Localizer["GroceriesImage"]),
                                        ImageHeadingTextCardHeading = "Mountain View Market Co-op"
                                        ,ImageHeadingTextCardText="Groceries & More"},
            new ImageHeadingTextCardDto{ImageHeadingTextCardLink = "",
                                        ImageHeadingTextCardImageSource = String.Format("{0}{1}", Localizer["BaseImageUrl"], Localizer["CatererImage"]),
                                        ImageHeadingTextCardHeading= "Okazuri Floating Sushi Bar"
                                        ,ImageHeadingTextCardText="Sushi Bar, Caterer"},
            new ImageHeadingTextCardDto{ImageHeadingTextCardLink = "",
                                        ImageHeadingTextCardImageSource = String.Format("{0}{1}", Localizer["BaseImageUrl"], Localizer["ScreenPrintingImage"]),
                                        ImageHeadingTextCardHeading= "Ragged Apparel﻿"
                                        ,ImageHeadingTextCardText="Screen Printing and Graphic Media"}
        };
        SliderItem = new List<SliderItemDto>
    {
        new SliderItemDto{
            Source = String.Format("{0}{1}", Localizer["BaseImageUrl"], Localizer["LasCruseSliderImage1"]),
            Alt = "First Slide",
            Caption = "Slide 1",
            Header = "Slider 1 Header"

        },
        new SliderItemDto{
            Source = String.Format("{0}{1}", Localizer["BaseImageUrl"], Localizer["LasCruseSliderImage2"]),            Alt = "Second Slide",
            Caption = "Slide 2",
            Header = "Slider 2 Header"

        },
        new SliderItemDto{
            Source = String.Format("{0}{1}", Localizer["BaseImageUrl"], Localizer["LasCruseSliderImage3"]),            Alt = "Third Slide",
            Caption = "Slide 3",
            Header = "Slider 3 Header"

        },
    };
        #endregion

        //Localization = LocalizationDropDown.Localization;
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // CHeck if user has Admin ofr Manager Role
        if (user.Identity.IsAuthenticated)
        {

            // Check if MFA Force enable for the user
            force2FAClaim = user.Claims.Where(x => x.Type == "force2fa").FirstOrDefault();
            ID = user.FindFirst(c => c.Type == "sub")?.Value;

            // Check if MFA is already not enable for the user
            amrClaim = user.Claims.Where(x => x.Type == "amr").FirstOrDefault();
            if (force2FAClaim != null && force2FAClaim.Value == mfaForceText)
            {
                if (amrClaim == null || amrClaim.Value != mfaName)
                {
                    // Force redirect to Enabl MFA page
                    await JS.InvokeAsync<string>("navigateToMFA");
                    _logger.LogWarning("warning");

                }
            }
        }

        await base.OnInitializedAsync();
    }

}
