@page "/Fans"
@page "/Fans/{SiteID}"

@using MyCommunityBuilder.Client.Services
@using MyCommunityBuilder.Client.Shared
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<Index> _logger
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject IStringLocalizer<Resource> Localizer

<div class="row">
    <JSlider Records="SliderItem"></JSlider>
</div>
<div class="row" style="height: 75px;">
    <NavMenuBar></NavMenuBar>
</div>
<div class="container-fluid">
    <div class="row">
        <div class="col-12 col-sm-12 col-md-8 col-lg-8">
            <div>
                <JImage Src="@(String.Format("{0}{1}", Localizer["BaseImageUrl"], Localizer["FansMainImage"]))"></JImage>
            </div>
            <div>
                <JHeadingTextCard Title=@Localizer["RegisteredFansGettheFollowingBenefits"] ImageSource="@(String.Format("{0}{1}", Localizer["BaseImageUrl"], Localizer["SpecialOfferImage"]))" Records="@HeadingTextCardDto"></JHeadingTextCard>
            </div>
        </div>
        <div class="col-12 col-sm-12 col-md-4 col-lg-4">
            <div class="FanSearchDiv">
                <h6>
                    <input class="FanSearchInput" type="text" placeholder=@Localizer["Findyourfavoritebusiness"]>
                    <input class="FanSearchIcon" type="image" src="@(String.Format("{0}{1}", Localizer["BaseImageUrl"], Localizer["SearchImage"]))">
                </h6>
                <button type="button" class="btn btn-link FanSearchButton">
                    ...@Localizer["orinviteabusinesstoregister"]
                </button>
            </div>
            <div>
                <JButton Records="ButtonDto"></JButton>
            </div>
            <div>
                <JSmallImageCard Records="SmallImageCardDto"></JSmallImageCard>
            </div>
            <div>
                <JLinksCard Title=@Localizer["MoreforFans"] Records="LinksCardDto"></JLinksCard>
            </div>
        </div>
    </div>
</div>
@code {
    [Parameter]
    public string SiteID { get; set; }
    public List<HeadingTextCardDto> HeadingTextCardDto = new List<HeadingTextCardDto>();
    public ButtonDto ButtonDto = new ButtonDto();
    public SmallImageCardDto SmallImageCardDto = new SmallImageCardDto();
    public List<LinksCardDto> LinksCardDto = new List<LinksCardDto>();
    List<SliderItemDto> SliderItem = new List<SliderItemDto>();
    #region Authentication
    [Parameter]
    public string ID { get; set; }
    private string mfaName = "[\"mfa\"]";
    private string mfaForceText = "True";
    private Claim amrClaim;
    private Claim force2FAClaim;
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();
    private AuthenticationState authState;
    private string _authMessage;
    private string _surnameMessage;
    #endregion

    protected override async Task OnInitializedAsync()
    {
        #region Components Data
        HeadingTextCardDto = new List<HeadingTextCardDto>
{
            new HeadingTextCardDto{HeadingTextCardLink="", HeadingTextCardHeading="1. Special Discounts",
                                   HeadingTextCardContent = "Fans receive special discounts that are unavailable to the general public."},
            new HeadingTextCardDto{HeadingTextCardLink="", HeadingTextCardHeading="2. Mentorship Opportunities",
                                   HeadingTextCardContent = "Fans can give their favorite businesses constructive advice (e.g., how to improve service)."},
            new HeadingTextCardDto{HeadingTextCardLink="", HeadingTextCardHeading="3. Investment Brainstorming",
                                   HeadingTextCardContent = "Fans can discuss possibilities for investment crowdfunding with their businesses."},

        };
        ButtonDto = new ButtonDto
        {
            ButtonBackGroundColor = "green",
            Color = "white",
            Text = Localizer["FindaCompleteListofSmallStreetBusinesses"],
            Link = ""
        };
        SmallImageCardDto = new SmallImageCardDto
        {
            SmallImageCardHeading = Localizer["WhatdoFanssay?"],
            SmallImageCardContent = "Since becoming a fan of Burritos Victoria in June 2020,I think I’ve saved nearly $250 with special discounts.Plus, I’ve been able to help the restaurant by opening doors to catering opportunities.",
            SmallImageCardSource = String.Format("{0}{1}", Localizer["BaseImageUrl"], Localizer["WhatdoFanssayImage"]),
            SmallImageCardText1 = "Hector Rivera, 29",
            SmallImageCardText2 = "Fan of Burritos Victoria"
        };
        LinksCardDto = new List<LinksCardDto>
    {
            new LinksCardDto{LinksCardLinks="", LinksCardLinksText="List of all Registered Businesses"},
            new LinksCardDto{LinksCardLinks="", LinksCardLinksText="Top Fans"},
            new LinksCardDto{LinksCardLinks="", LinksCardLinksText="Should I Invest?"}
        };
        SliderItem = new List<SliderItemDto>
        {
        new SliderItemDto{
            Source = String.Format("{0}{1}", Localizer["BaseImageUrl"], Localizer["LasCruseSliderImage1"]),
            Alt = "First Slide",
            Caption = "Slide 1",
            Header = "Slider 1 Header"

        },
        new SliderItemDto{
            Source = String.Format("{0}{1}", Localizer["BaseImageUrl"], Localizer["LasCruseSliderImage2"]),            Alt = "Second Slide",
            Caption = "Slide 2",
            Header = "Slider 2 Header"

        },
        new SliderItemDto{
            Source = String.Format("{0}{1}", Localizer["BaseImageUrl"], Localizer["LasCruseSliderImage3"]),            Alt = "Third Slide",
            Caption = "Slide 3",
            Header = "Slider 3 Header"

        },
    };
        #endregion

        //Localization = LocalizationDropDown.Localization;
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // CHeck if user has Admin ofr Manager Role
        if (user.Identity.IsAuthenticated)
        {

            // Check if MFA Force enable for the user
            force2FAClaim = user.Claims.Where(x => x.Type == "force2fa").FirstOrDefault();
            ID = user.FindFirst(c => c.Type == "sub")?.Value;

            // Check if MFA is already not enable for the user
            amrClaim = user.Claims.Where(x => x.Type == "amr").FirstOrDefault();
            if (force2FAClaim != null && force2FAClaim.Value == mfaForceText)
            {
                if (amrClaim == null || amrClaim.Value != mfaName)
                {
                    // Force redirect to Enabl MFA page
                    await JS.InvokeAsync<string>("navigateToMFA");
                    _logger.LogWarning("warning");

                }
            }
        }

        await base.OnInitializedAsync();
    }

}
