@page "/LocalBusiness"
@using MyCommunityBuilder.Client.Services
@inject BusinessClient BusinessClient
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<Index> _logger
@inject IJSRuntime JS
@inject IStringLocalizer<Resource> Localizer

<div class="row">
    <JSlider Records="SliderItem"></JSlider>
</div>
<div class="row" style="height: 75px;">
    <NavMenuBar></NavMenuBar>
</div>
<div class="container ContainerBody">
    <div class="row RowCenter">
        <div class="col-md-2 col-lg-2">
        </div>
        <div class="col-sm-12 col-md-8 col-lg-8">
            <div class="containerBar">
                    <select class="Drop selectBar" value="@CategorySelect" @oninput="@((e) => { SearchText=(string)e.Value;})" @onchange="@((e)=>OnSelectCat(SearchText))">
                        <option value="default" disabled selected>Select category</option>
                        @foreach (var item in BusinessCategories)
	                     {
	                     	 <option value="@item">@item</option>
	                     }
                    </select>
                    <input id="autoCompleteInput" list="AutoCompleteList" class="input" type="text" placeholder="Business" name="SearchBar" value="@SearchText" @onchange="((e) => OnSelectByNameAndTitle(e.Value.ToString()))">
                    <datalist id="AutoCompleteList">
                        @foreach (var item in AutoComplete)
	                     {
                            <option value="@item"/>
	                     }
                        
                    </datalist>
                <button class="btnBar" @onclick="GetAllLocalBusinessCard"> All </button>
            </div>
            @*<div class="SearchBarDiv">*@
                @*<input class="SearchInput" type="text" placeholder="Business name..." @oninput="@((e) => { SearchText=(string)e.Value;})" />*@
                @*<div class="control-wrapper">*@
                    @*<SfAutoComplete TValue="string" TItem="BusinessLocalCardDto" Placeholder="Business" DataSource="@BusinessLocalCardDto" @oninput="@((e) => { SearchText=(string)e.Value;})" @onkeypress="@((e)=>OnChange())">
                    <AutoCompleteFieldSettings Value="BusinessLocalCardName" />
                    <AutoCompleteFieldSettings Value="BusinessLocalCardTitle" />
                </SfAutoComplete>
                <SfDropDownList TValue="string" TItem="BusinessLocalCardDto" Placeholder="Select a category" DataSource="@BusinessLocalCardDto">
                    <DropDownListEvents TItem="BusinessLocalCardDto" TValue="string" OnValueSelect="@((e)=>OnSelectCat(e.ItemData.BusinessLocalCardCategory))"></DropDownListEvents>
                    <DropDownListFieldSettings Value="BusinessLocalCardCategory" Text="BusinessLocalCardCategory"></DropDownListFieldSettings>
                </SfDropDownList>*@
                    @*<input class="InputWidth" list="browsers" name="myBrowser" Placeholder="Business" @oninput="@((e) => { SearchText=(string)e.Value;})" @onchange="@((e)=>OnChange())"/>

                <datalist id="browsers">
                    @foreach (var item in BusinessLocalCardDto)
                    {
                        <option value="@item.BusinessLocalCardCategory" />
                    }
                </datalist>
                <input class="SearchIcon" type="image" @onclick="GetLocalBusinessCardBySearchText" title="Search business name, type, city or other" src="@(String.Format("{0}{1}", Localizer["BaseImageUrl"], Localizer["SearchImage"]))" align="top" />*@
                @*</div>
            </div>*@
        </div>
        @*<div class="col-sm-12 col-md-3 col-lg-3">
            <div class="SearchBarDiv">
                <SfDropDownList TValue="string" TItem="BusinessLocalCardDto" Placeholder="Select a city" DataSource="@BusinessLocalCardDto">
                    <DropDownListEvents TItem="BusinessLocalCardDto" TValue="string" OnValueSelect="@((e)=>OnSelectCat(e.ItemData.BusinessLocalCardCategory))"></DropDownListEvents>
                    <DropDownListFieldSettings Value="BusinessLocalCardCategory" Text="BusinessLocalCardCategory"></DropDownListFieldSettings>
                </SfDropDownList>
            </div>
        </div>*@
        <div class="col-md-2 col-lg-2">
        </div>
    </div>
    <div class="row RowCenter">
        <div class="col-md-4 col-lg-4"></div>
        <div class="col-sm-12 col-md-4 col-lg-4">
            <button type="button" class="btn btn-link InviteBusinessLink">
                Invite a business to register
            </button>
        </div>
        <div class="col-md-4 col-lg-4"></div>
    </div>
    <div class="row">
        <div class="col-sm-12 col-md-8 col-lg-8">
            @*<div class="GetAllBusinessDiv">
                &nbsp;&nbsp;&nbsp;<a class="hover-item GetAllBusinessLink" @onclick="GetAllLocalBusinessCard">All Businesses</a>
                <span class="SpaceSpan">&gt;</span>
                <a href="#" class="SearchText">@SearchText</a>
            </div>*@
        </div>
        <div class="col-md-2 col-lg-2"></div>
        <div class="col-sm-12 col-md-2 col-lg-2">
            <select class="Drop2" value="@SortBy"  @onchange="GetSortedLocalBusinessCard">
                <option value="" disabled selected>Sort By:</option>
                <option value="1">Newest</option>

            </select>
        </div>
    </div>
    <div class="row">
        <div class="col-md-1 col-lg-1"></div>
        <JLocalBusinessCard Records="CurrentBusinessLocalCardDto"></JLocalBusinessCard>
    </div>
</div>
@*<div class="container-fluid">
        <div style="text-align: left; vertical-align: bottom;">
            &nbsp;&nbsp;&nbsp;<a class="hover-item" @onclick="GetAllLocalBusinessCard" style="font-family:Verdana;font-size:0.8em; color:blue;">All Businesses</a>
            <span id="MainContent_lbl_SearchCarat" style="font-family:Verdana;font-size:0.8em;">&gt;</span>
            <a id="MainContent_hlnk_SearchTerm" href="#" style="font-family:Verdana;font-size:0.8em;">@SearchText</a>
        </div>
        <div class="row">
            @foreach (var item in BusinessBySite)
            {
                <div class="PanelProduct col-xs-12 col-sm-6 col-md-4 col-lg-3 col-xl-2">
                    <div class="DivDesignName" style="text-align: center; background-color: #333333; border-color: #333333; overflow: hidden;">
                        <span class="BusinessName" style="text-align: center; font-size: medium; border-color: #333333; color: WHITE;" title='Mexican Restaurant'>@item.BusinessName</span><br />
                    </div>

                    <div class="DivProductImage" style="text-align: center; background-color: #333333; border-color: #333333;">
                        <a @onclick="() => GetBusinessDetail(item.BusinessID)" id="MainContent_RepeaterBusinesses_HyperProductPage_0" class="hyperProductImage"><img class="ProductImage" data-width="250" data-height="104" src="http://www.las-cruces.biz/images/Designs/Icons/29a9b567-5b2b-49ba-b71c-56b4463940c3.jpg" style="text-align: center;" /></a>
                    </div>

                    <div style="border: 1px solid #333333; padding: 5px 2px 5px 2px; text-align: center; background-color: #333333; overflow: hidden; color: WHITE;">
                        <div style="text-align: center; font-size: medium" title='Mexican Restaurant'>
                            @item.Type
                        </div>
                    </div>
                </div>
            }
            <a style="color: Red; font-family: verdana; font-size: Medium; font-weight: bold; text-decoration: underline; padding-top: 5px;">Help! I have a business that I want to add.</a>
        </div>
    </div>*@


@code {
    List<SliderItemDto> SliderItem = new List<SliderItemDto>();
    List<BusinessLocalCardDto> BusinessLocalCardDto = new List<BusinessLocalCardDto>();
    List<BusinessLocalCardDto> CurrentBusinessLocalCardDto = new List<BusinessLocalCardDto>();
    List<string> BusinessCategories = new List<string>();
    List<string> AutoComplete = new List<string>();
    public int? SortBy { get; set; }
    public string CategorySelect { get; set; }
    protected override async Task OnInitializedAsync()
    {
        #region Components Data
        SliderItem = new List<SliderItemDto>
{
        new SliderItemDto{
            Source = String.Format("{0}{1}", Localizer["BaseImageUrl"], Localizer["LasCruseSliderImage1"]),
            Alt = "First Slide",
            Caption = "Slide 1",
            Header = "Slider 1 Header"

        },
        new SliderItemDto{
            Source = String.Format("{0}{1}", Localizer["BaseImageUrl"], Localizer["LasCruseSliderImage2"]),
            Alt = "Second Slide",
            Caption = "Slide 2",
            Header = "Slider 2 Header"

        },
        new SliderItemDto{
            Source = String.Format("{0}{1}", Localizer["BaseImageUrl"], Localizer["LasCruseSliderImage3"]),
            Alt = "Third Slide",
            Caption = "Slide 3",
            Header = "Slider 3 Header"

        },
    };

        BusinessLocalCardDto = new List<BusinessLocalCardDto>
{
            new BusinessLocalCardDto
            {
                BusinessLocalCardTitle = "Burrito's Victoria",
                BusinessLocalCardImage = String.Format("{0}{1}", Localizer["BaseImageUrl"], Localizer["LocalBusinessImage"]),
                BusinessLocalCardName = "Mexican Restaurant",
                BusinessLocalCardLink = "",
                BusinessLocalCardDescription = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged.",
                BusinessLocalCardCategory = "Sports",
                BusinessLocalCardNewest = null
            },
            new BusinessLocalCardDto
            {
                BusinessLocalCardTitle = "Las Cruces Game Knights",
                BusinessLocalCardImage = String.Format("{0}{1}", Localizer["BaseImageUrl"], Localizer["LocalBusinessImage"]),
                BusinessLocalCardName = "Mexican Restaurant",
                BusinessLocalCardLink = "",
                BusinessLocalCardDescription = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged.",
                BusinessLocalCardCategory = "Sports",
                BusinessLocalCardNewest = DateTime.Now.Date.ToString()
            },
            new BusinessLocalCardDto
            {
                BusinessLocalCardTitle = "Licensed Massage Therapy﻿",
                BusinessLocalCardImage = String.Format("{0}{1}", Localizer["BaseImageUrl"], Localizer["LocalBusinessImage"]),
                BusinessLocalCardName = "Mexican Restaurant",
                BusinessLocalCardLink = "",
                BusinessLocalCardDescription = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged.",
                BusinessLocalCardCategory = "Childern",
                BusinessLocalCardNewest = null
            },
            new BusinessLocalCardDto
            {
                BusinessLocalCardTitle = "Mountain View Market Co-op",
                BusinessLocalCardImage = String.Format("{0}{1}", Localizer["BaseImageUrl"], Localizer["LocalBusinessImage"]),
                BusinessLocalCardName = "Mexican Restaurant",
                BusinessLocalCardLink = "",
                BusinessLocalCardDescription = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged.",
                BusinessLocalCardCategory = "Childern",
                BusinessLocalCardNewest = null
            },
            new BusinessLocalCardDto
            {
                BusinessLocalCardTitle = "Okazuri Floating Sushi Bar",
                BusinessLocalCardImage = String.Format("{0}{1}", Localizer["BaseImageUrl"], Localizer["LocalBusinessImage"]),
                BusinessLocalCardName = "Mexican Restaurant",
                BusinessLocalCardLink = "",
                BusinessLocalCardDescription = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged.",
                BusinessLocalCardCategory = "IT",
                BusinessLocalCardNewest = DateTime.Now.Date.ToString()
            },
            new BusinessLocalCardDto
            {
                BusinessLocalCardTitle = "Precious Little One's Childcare LLC",
                BusinessLocalCardImage = String.Format("{0}{1}", Localizer["BaseImageUrl"], Localizer["LocalBusinessImage"]),
                BusinessLocalCardName = "Mexican Restaurant",
                BusinessLocalCardLink = "",
                BusinessLocalCardDescription = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged.",
                BusinessLocalCardCategory = "IT",
                BusinessLocalCardNewest = DateTime.Now.Date.ToString()
            },
        };
        foreach (var item in BusinessLocalCardDto)
        {
            CurrentBusinessLocalCardDto.Add(new BusinessLocalCardDto() {
                BusinessLocalCardTitle = item.BusinessLocalCardTitle,
                BusinessLocalCardImage = item.BusinessLocalCardImage,
                BusinessLocalCardName = item.BusinessLocalCardName,
                BusinessLocalCardCategory = item.BusinessLocalCardCategory,
                BusinessLocalCardDescription = item.BusinessLocalCardDescription,
                BusinessLocalCardLink = item.BusinessLocalCardLink,
                BusinessLocalCardNewest = item.BusinessLocalCardNewest
            });
        }

        foreach (var item in BusinessLocalCardDto)
        {
            BusinessCategories.Add(item.BusinessLocalCardCategory);
        }
        foreach (var item in BusinessLocalCardDto)
        {
            AutoComplete.Add(item.BusinessLocalCardName);

        }
        foreach (var item in BusinessLocalCardDto)
        {

            AutoComplete.Add(item.BusinessLocalCardTitle);
        }
        _logger.LogInformation(string.Join(Environment.NewLine, AutoComplete));
        #endregion
        _logger.LogInformation("SearchText", SearchText);
        await LoadBusinessesBySiteID();
        await base.OnInitializedAsync();
    }

    private async Task GetLocalBusinessCardBySearchText()
    {
        try
        {

            BusinessLocalCardDto = BusinessLocalCardDto.Where(x => x.BusinessLocalCardTitle == SearchText || x.BusinessLocalCardName == SearchText || x.BusinessLocalCardCategory == SearchText).ToList();


        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
    }

    private async Task GetSortedLocalBusinessCard(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        try
        {
            _logger.LogInformation(string.Join(Environment.NewLine, e));
            SortBy = Convert.ToInt32(e.Value.ToString());
            if(SortBy == 1)
                CurrentBusinessLocalCardDto = CurrentBusinessLocalCardDto.OrderByDescending(x => x.BusinessLocalCardNewest).ToList();

            SearchText = "Newest";
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
    }
    private async Task OnChange()
    {
        try
        {
            var title = BusinessLocalCardDto.Select(p => p.BusinessLocalCardTitle);
            //BusinessLocalCardDto = BusinessLocalCardDto.Where(item => BusinessLocalCardDto.Contains(item)).ToList(); //BusinessLocalCardDto.Where(x => BusinessLocalCardDto.All(y => x.BusinessLocalCardTitle.Contains(SearchText))).ToList();
            BusinessLocalCardDto = BusinessLocalCardDto.Where(x => title.Contains(SearchText)).ToList();

            Console.WriteLine("BusinessLocalCardDto", BusinessLocalCardDto);

        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
    }
    private async Task OnSelectCat(string e)
    {
        try
        {
            _logger.LogInformation(string.Join(Environment.NewLine, e));

            CurrentBusinessLocalCardDto = BusinessLocalCardDto.Where(x => x.BusinessLocalCardCategory == e).ToList();
            _logger.LogInformation(string.Join(Environment.NewLine, BusinessLocalCardDto));
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
    }
    private async Task OnSelectByNameAndTitle(string e)
    {
        try
        {
            _logger.LogInformation(string.Join(Environment.NewLine, e));

            CurrentBusinessLocalCardDto = BusinessLocalCardDto.Where(x => x.BusinessLocalCardName == e || x.BusinessLocalCardTitle == e).ToList();
            SearchText = e;
            SearchText = "";
            _logger.LogInformation(string.Join(Environment.NewLine, BusinessLocalCardDto));
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
    }

}
