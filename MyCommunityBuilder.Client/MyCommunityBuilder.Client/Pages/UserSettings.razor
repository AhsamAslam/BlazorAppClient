@page "/user-settings"

@using MyCommunityBuilder.Client.Services;
@using System.Security.Claims

@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider

@inject AccountService accountService;

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success" role="alert">
        @successMessage
    </div>
}


@if (user != null)
{
    <div class="card">
        <div class="card-header">
            <h5 class="card-title"> Sign In Security</h5>
        </div>
        <div class="card-body">
            <div class="custom-control custom-radio">
                @if (user.TwoFactorEnabled)
                {
                    <input type="radio" value="@user.TwoFactorEnabled" class="custom-control-input" id="@user.Id" name="@user.Id mfa" @onchange="eventArgs => { RadionClicked(eventArgs.Value, user, false); }">
                }
                else
                {
                    <input type="radio" value="@user.TwoFactorEnabled" class="custom-control-input" id="@user.Id" name="@user.Id mfa" checked>

                }
                <label class="custom-control-label" for="@user.Id">Login with UserName & Password</label>
            </div>

            <div class="custom-control custom-radio mt-5">

                @if (user.TwoFactorEnabled)
                {
                    <input type="radio" class="custom-control-input" checked
                           value="@user.TwoFactorEnabled" id="@user.Id mfa" name="@user.Id mfa">
                }
                else
                {
                    <input type="radio" value="@user.TwoFactorEnabled" class="custom-control-input" id="@user.Id mfa" name="@user.Id mfa" @onchange="eventArgs => { RadionClicked(eventArgs.Value, user, true); }">
                }
                <label class="custom-control-label" for="@user.Id mfa">Login with 2FA</label>
            </div>

            @if (user.Was2faEnabledInit && showAuthCodeTextBox && !hideVerifyButton)
            {
                <div class="form-group mt-3">
                    <label class="control-label">Verification Code</label>
                    <input @bind="autCode" class="form-control" maxlength="6" autocomplete="off" />
                    <span asp-validation-for="Input.Code" class="text-danger"></span>
                </div>

                <button type="submit" @onclick="VerifyAuthenticatorCode" class="btn btn-primary mt-3">Verify</button>
            }
            else if (user.TwoFactorEnabled && !user.Was2faEnabledInit)
            {
                <a id="enable-authenticator" href="/Identity/Account/Manage/EnableAuthenticator" class="mt-3 btn btn-primary">Setup authenticator app</a>
            }

        </div>
    </div>
}
@code {
    IdentityUserViewModel user;
    UpdateIdentityUserViewModel updateIdentityUser;
    VerifyTwoFactorTokenReqModel tokenReqModel;
    private AuthenticationState authState;
    string autCode = string.Empty;
    bool showAuthCodeTextBox = false;
    string userId = string.Empty;
    string errorMessage = string.Empty;
    string successMessage = string.Empty;
    bool hideVerifyButton = false;
    protected override async Task OnInitializedAsync()
    {
        errorMessage = string.Empty;
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userId = authState.User.Claims.Where(x => x.Type == "user_id").Select(x => x.Value).FirstOrDefault();
        user = await accountService.GetById(userId);

        await base.OnInitializedAsync();
    }
    async Task RadionClicked(object argValue, IdentityUserViewModel userObj, bool twoFactorEnable)
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;
        if (!user.TwoFactorEnabled && twoFactorEnable)
        {
            hideVerifyButton = false;
        }
        user.TwoFactorEnabled = twoFactorEnable;
        showAuthCodeTextBox = user.TwoFactorEnabled;

        if (!twoFactorEnable)
            await Save1FA();
        else StateHasChanged();
    }

    async Task Save1FA()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;
        updateIdentityUser = new UpdateIdentityUserViewModel();
        updateIdentityUser.UserId = user.Id;
        updateIdentityUser.TwoFactorEnabled = false;
        //await accountService.UpdateUser(updateIdentityUser);
        successMessage = "Successfuly saved.";
        StateHasChanged();
    }

    async Task VerifyAuthenticatorCode()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;
        tokenReqModel = new VerifyTwoFactorTokenReqModel();
        tokenReqModel.UserId = userId;
        tokenReqModel.TokenCode = autCode;

        if (string.IsNullOrEmpty(autCode) || autCode.Length != 6)
        {
            errorMessage = "Verification code is invalid.";
            return;
        }
        var respose = await accountService.VerifyTwoFactorToken(tokenReqModel);
        if (respose == null || respose.UserId == null)
        {
            errorMessage = "Verification code is invalid.";
            hideVerifyButton = false;
        }
        else
        {
            successMessage = "Your authenticator app has been verified.";
            hideVerifyButton = true;
        }
        StateHasChanged();
    }
}
