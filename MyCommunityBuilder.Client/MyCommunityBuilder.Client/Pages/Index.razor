@page "/"
@page "/Index"
@page "/Index/{SiteID}"
@using MyCommunityBuilder.Client.Services
@using MyCommunityBuilder.Client.Shared
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<Index> _logger
@inject SiteClient SiteClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject IStringLocalizer<Resource> Localizer

@*<div class="row">
    
</div>*@
<JSlider Records="SliderItem"></JSlider>
<NavMenuBar></NavMenuBar>
@*<div class="row" style="height: 75px;">
    
</div>*@
<div class="container-fluid">
    <div class="row">
        <div class="col-12 col-sm-12 col-md-8 col-lg-8">
            <div style="padding-bottom:10px;">
                <JImage Src="@(String.Format("{0}{1}", Localizer["BaseImageUrl"], Localizer["IndexMainImage"]))" Text=@Localizer["PutYourDollars"]></JImage>
            </div>
            <div>
                <JIndexLeftCard CardTitle=@Localizer["CurrentOfferingsfromLasCrucesBusinesses"] Records="@IndexLeftCardDto"></JIndexLeftCard>
            </div>
        </div>
        <div class="col-12 col-sm-12 col-md-4 col-lg-4">
            <div>
                <JLargeImageCard Records="LargeImageCard1"></JLargeImageCard>
            </div>
            <div>
                <JLargeImageCard Records="LargeImageCard2"></JLargeImageCard>
            </div>
            <div>
                <JGenericEventCard Records="GenericEventCard"></JGenericEventCard>
            </div>
        </div>
    </div>
</div>

@code

{
    [Parameter]
    public string SiteID { get; set; }
    public string ID { get; set; }
    public List<JIndexLeftCardDto> IndexLeftCardDto = new List<JIndexLeftCardDto>();
    public LargeImageCardDto LargeImageCard1 = new LargeImageCardDto();
    public LargeImageCardDto LargeImageCard2 = new LargeImageCardDto();
    public GenericEventCardDto GenericEventCard = new GenericEventCardDto();
    List<SliderItemDto> SliderItem = new List<SliderItemDto>();

    #region Authentication
    private string mfaName = "[\"mfa\"]";
    private string mfaForceText = "True";
    private Claim amrClaim;
    private Claim force2FAClaim;
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();
    private AuthenticationState authState;
    private string _authMessage;
    private string _surnameMessage;
    #endregion

    protected override async Task OnInitializedAsync()
    {
        #region Components Data
        IndexLeftCardDto = new List<JIndexLeftCardDto>
{
            new JIndexLeftCardDto{CardHeading ="Purchasing Deals", CardLink1 = "/", CardLink1Text1="Burrito's Victoria",
                                  CardLink1Text2="25% off on a table of 5", CardLink2="/", CardLink2Text1="Licensed Massage Therapy﻿",
                                  CardLink2Text2 = "Buy one full body massage and bring a friend for free",
                                  CardLink3="/", CardLink3Text1="Precious Little One's Childcare", CardLink3Text2="Pay for 3 weeks and get the 4th for free"},

            new JIndexLeftCardDto{CardHeading ="Bulk Pre-purchasing Deals", CardLink1 = "/", CardLink1Text1="Zumo Eco Farm",
                                  CardLink1Text2="Up to 20% off when you purchase in advance.", CardLink2="", CardLink2Text1="Okazuri Sushi",
                                  CardLink2Text2 = "Buy $500 in meals, and get 25% off",
                                  CardLink3="", CardLink3Text1="The Bugyman Exterminators", CardLink3Text2="Purchase the two-year protection plan, and save 10%"},

             new JIndexLeftCardDto{CardHeading ="Investment Crowdfundind Deals", CardLink1 = "/", CardLink1Text1="Cassava Restaurant",
                                  CardLink1Text2="$500,000 to move to a new location.", CardLink2="", CardLink2Text1="Mountain View Co-op",
                                  CardLink2Text2 = "$20,000 to help the Coop purchase a new building",
                                  CardLink3="", CardLink3Text1="Burrito's Victoria", CardLink3Text2="$75,000 sought to add a food truck"},

              new JIndexLeftCardDto{CardHeading ="Donation Crowdfundind Deals", CardLink1 = "/", CardLink1Text1="The 29 Diner Kitchen",
                                  CardLink1Text2="$50,000. Due to a fire, the entire kitchen is in need of repair.", CardLink2="", CardLink2Text1="Ragged Apparel",
                                  CardLink2Text2 = "Acquire gear for special youth teams",
                                  CardLink3="", CardLink3Text1="Licensed Massage Therapy", CardLink3Text2="Bring massages to elderly veterans"}
        };
        LargeImageCard1 = new LargeImageCardDto
        {
            LargeImageCardHeading = Localizer["BOWcol"],
            LargeImageCardSource = String.Format("{0}{1}", Localizer["BaseImageUrl"], Localizer["BusinessoftheWeekImage"]),
            LargeImageCardText = "",
            LargeImageCardLink = "/Index",
            LargeImageCardLinkText = "Precious Little One's Childcare",
            LargeImageCardContent = "My facility is an in home center that I started in 2006 after working as a volunteer..."
        };
        LargeImageCard2 = new LargeImageCardDto
        {
            LargeImageCardHeading = Localizer["OOWcol"],
            LargeImageCardSource = String.Format("{0}{1}", Localizer["BaseImageUrl"], Localizer["OfferingoftheWeekImage"]),
            LargeImageCardText = "",
            LargeImageCardLink = "/Index",
            LargeImageCardLinkText = "Cassava Restaurant",
            LargeImageCardContent = "$500,000 to move to a new location for a equitable & ethical restaurant operation..."
        };
        GenericEventCard = new GenericEventCardDto
        {
            GenericEventCardHeading = Localizer["EOWcol"],
            GenericEventCardDate = "14",
            GenericEventCardMonth = "JUL",
            GenericEventCardTag = "NEW!",
            GenericEventCardUpperCaseText = "LOCAL INVESTMENT 101",
            GenericEventCardContent = "Don't miss this essential series.",
            GenericEventCardListContent1 = "Investment class begins with pt 1",
            GenericEventCardDay = "Wednesday",
            GenericEventCardListContent2 = "All Day",
            GenericEventCardListContent3 = "Join Online Here",
            GenericEventCardLink = "/"
        };
        SliderItem = new List<SliderItemDto>
        {
        new SliderItemDto{
            Source = String.Format("{0}{1}", Localizer["BaseImageUrl"], Localizer["LasCruseSliderImage1"]),
            Alt = "First Slide",
            Caption = "Slide 1",
            Header = "Slider 1 Header"

        },
        new SliderItemDto{
            Source = String.Format("{0}{1}", Localizer["BaseImageUrl"], Localizer["LasCruseSliderImage2"]),            Alt = "Second Slide",
            Caption = "Slide 2",
            Header = "Slider 2 Header"

        },
        new SliderItemDto{
            Source = String.Format("{0}{1}", Localizer["BaseImageUrl"], Localizer["LasCruseSliderImage3"]),            Alt = "Third Slide",
            Caption = "Slide 3",
            Header = "Slider 3 Header"

        },
    };
        #endregion

        //Localization = LocalizationDropDown.Localization;
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // CHeck if user has Admin ofr Manager Role
        if (user.Identity.IsAuthenticated)
        {

            // Check if MFA Force enable for the user
            force2FAClaim = user.Claims.Where(x => x.Type == "force2fa").FirstOrDefault();
            ID = user.FindFirst(c => c.Type == "sub")?.Value;

            // Check if MFA is already not enable for the user
            amrClaim = user.Claims.Where(x => x.Type == "amr").FirstOrDefault();
            if (force2FAClaim != null && force2FAClaim.Value == mfaForceText)
            {
                if (amrClaim == null || amrClaim.Value != mfaName)
                {
                    // Force redirect to Enabl MFA page
                    await JS.InvokeAsync<string>("navigateToMFA");
                    _logger.LogWarning("warning");

                }
            }
        }

        await base.OnInitializedAsync();
    }
    //public void Dispose()
    //{
    //    LocalizationDropDown.OnChange -= StateHasChanged;
    //}

}